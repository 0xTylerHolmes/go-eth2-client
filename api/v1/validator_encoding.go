// Code generated by fastssz. DO NOT EDIT.
// Hash: 264124aca827a6066551ea9d2be9ac8894bd82daebb3f8f29ece5f18881f2071
// Version: 0.1.3
package v1

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Validator object
func (a *Validator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the Validator object to a target array
func (a *Validator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Index'
	dst = ssz.MarshalUint64(dst, uint64(a.Index))

	// Field (1) 'Balance'
	dst = ssz.MarshalUint64(dst, uint64(a.Balance))

	// Field (2) 'Status'
	dst = ssz.MarshalUint64(dst, uint64(a.Status))

	// Field (3) 'Validator'
	if a.Validator == nil {
		a.Validator = new(phase0.Validator)
	}
	if dst, err = a.Validator.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Validator object
func (a *Validator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 145 {
		return ssz.ErrSize
	}

	// Field (0) 'Index'
	a.Index = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'Balance'
	a.Balance = phase0.Gwei(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'Status'
	a.Status = ValidatorState(int(ssz.UnmarshallUint64(buf[16:24])))

	// Field (3) 'Validator'
	if a.Validator == nil {
		a.Validator = new(phase0.Validator)
	}
	if err = a.Validator.UnmarshalSSZ(buf[24:145]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Validator object
func (a *Validator) SizeSSZ() (size int) {
	size = 145
	return
}

// HashTreeRoot ssz hashes the Validator object
func (a *Validator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the Validator object with a hasher
func (a *Validator) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Index'
	hh.PutUint64(uint64(a.Index))

	// Field (1) 'Balance'
	hh.PutUint64(uint64(a.Balance))

	// Field (2) 'Status'
	hh.PutUint64(uint64(a.Status))

	// Field (3) 'Validator'
	if a.Validator == nil {
		a.Validator = new(phase0.Validator)
	}
	if err = a.Validator.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Validator object
func (a *Validator) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}
